x4=yx[,5]
y=yx[,6]
yx <- data
x1=yx[,2]
x2=yx[,3]
x3=yx[,4]
x4=yx[,5]
y=yx[,6]
x1
y
survey=data.frame(y,x1,x2,x3,x4)
lm.sol=lm(y~.,data=survey)
summary(lm.sol)
vif(lm.sol)
survey.pr=princomp(~x1+x2+x3+x4,data=survey,cor=TRUE)
summary(survey.pr)
X <- read.csv("7-11.csv")
X
X <- scale(X)
pc <- principal(X, nfactors = 8, scores = TRUE)
pc
X <- read.csv("7-11.csv")
princomp(X, cor = TRUE)
pc <- princomp(X, cor = TRUE)
summary(oc)
summary(pc)
loadings(pc)
summary(pc, loadings = TRUE)
predict(pc)
Score <- predict(pc)
Score
Score <- Score[, 1:3]
Score
summary(pc, loadings = TRUE)$loadings
l <- summary(pc, loadings = TRUE)$loadings
l
loadings(pc)
loadings(pc)[[1]]
loadings(pc)[1]
help("loadings")
l[1:8, ]
l <- l[1:8, ]
l
Score
l
l <- l[1:3, ]
l
l <- loadings(pc)[1:8, 1:3]
l
Score
as.matrix(Score)%*%t(as.matrix(l))
Score
dist(Score)
d <- dist(Score)
d
hclust(d, method = "ward.D")
X.ward <- hclust(d, method = "ward.D")
plot(X.ward)
Score
sort(Score[, 1])
data1 <- read.csv("Pro6Data1.csv", encoding = "UTF-8")
data1
dist1 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist1), labRow = F, labCol = F)
model1 <- hclust(dist1, method = "ward.D")
res1 <- cutree(model1, k = 3)
help("cutree")
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
mds1
library(tidyverse)
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
ggplot(mds1$points, aes(mds1$points[, 1], mds1$points[, 2])) +
geom_point(size = 3, alpha = 0.8, aes(colour = factor(res1)))
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 3, alpha = 0.8, aes(colour = factor(res1)))
data1
data[, -1]
data1 <- scale(data[, 2:5])
data[, 2]
data1 <- scale(data1[, 2:5])
data1
heatmap(as.matrix(dist1), labRow = F, labCol = F)
dist1 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist1), labRow = F, labCol = F)
plot(res1)
model1 <- hclust(dist1, method = "ward.D")
res1 <- cutree(model1, k = 3)
plot(res1)
res1
model1 <- hclust(dist1, method = "ward.D")
res1 <- cutree(model1, k = 4)
res1
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 3, alpha = 0.8, aes(colour = factor(res1)))
model1 <- hclust(dist1, method = "ward.D")
res1 <- cutree(model1, k = 2)
res1
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 3, alpha = 0.8, aes(colour = factor(res1)))
help("cmdscale")
library(gridExtra)
model1 <- hclust(dist1, method = "ward.D")
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
factor1 <- lapply(2:5, function(i) {
cutree(model1, k = i)
})
factor1
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
res <- lapply(2:5, function(i) {
cutree(model1, k = i)
})
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 3, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
data1 <- read.csv("Pro6Data1.csv", encoding = "UTF-8")
data1 <- scale(data1[, 2:5])
dist1 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist1), labRow = F, labCol = F)
help("heatmap")
dist1 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist1))
model1 <- hclust(dist1, method = "ward.D")
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
res <- lapply(2:5, function(i) {
cutree(model1, k = i)
})
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
res[[2]]
q()
library(tidyverse)
library(gridExtra)
data1 <- read.csv("Pro6Data1.csv", encoding = "UTF-8")
data1 <- scale(data1[, 2:5])
dist1 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist1))
help("kmeans")
kmeans(data1, centers = 3, iter.max = 10, nstart = 1)
kmeans(data1, centers = 3, iter.max = 10, nstart = 2)
kmeans(data1, centers = 3, iter.max = 10, nstart = 3)
dist1 <- dist(data1, "minkowski", p = 2)
kmeans(dist1, centers = 3, algorithm = "MacQueen")
kmeans(dist1, centers = 2, algorithm = "MacQueen")
kmeans(dist1, centers = 3, algorithm = "MacQueen")
dist1 <- dist(data1, "minkowski", p = 2)
kmeans(dist1, centers = 3, algorithm = "MacQueen")
dist1 <- dist(data1, "minkowski", p = 2)
kmeans(dist1, centers = 3, algorithm = "MacQueen")
kmeans(data1, centers = 3, algorithm = "MacQueen")
subset(data1, sapply(1:nrow(data1), function(i){res[[2]][i] == 1}))
model1 <- hclust(dist1, method = "ward.D")
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
res <- lapply(2:5, function(i) {
cutree(model1, k = i)
})
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
dist1 <- dist(data1, "minkowski", p = 2)
kmeans(data1, centers = 3, algorithm = "MacQueen")
subset(data1, sapply(1:nrow(data1), function(i){res[[2]][i] == 1}))
data1
center1 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 1})))
center2 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 2})))
center3 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 3})))
center <- c(center1, center2, center3)
center
center <- data.frame(center1, center2, center3)
center
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
x
colnames(x) <- c("x", "y")
head(x)
(cl <- kmeans(x, 2))
points(cl$centers, col = 1:2, pch = 8, cex = 2)
plot(x, col = cl$cluster)
points(cl$centers, col = 1:2, pch = 8, cex = 2)
cl$centers
help("data.frame")
center <- cbind(center1, center2, center3)
center
cl <- kmeans(data1, centers, algorithm = "MacQueen")
center1 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 1})))
center2 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 2})))
center3 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 3})))
centers <- cbind(center1, center2, center3)
cl <- kmeans(data1, centers, algorithm = "MacQueen")
data1
centers
center1 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 1})))
center2 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 2})))
center3 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 3})))
centers <- rbind(center1, center2, center3)
cl <- kmeans(data1, centers, algorithm = "MacQueen")
help(kmeans)
plot(data1, col = cl$cluster)
plot(data1[, 1], col = cl$cluster)
plot(data1[, 1:2], col = cl$cluster)
cl
kmeans(data1, centers, algorithm = "Forgy")
kmeans(dist1, centers, algorithm = "Forgy")
cl$cluster
center1 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 1})))
center2 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 2})))
center3 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 3})))
centers <- rbind(center1, center2, center3)
kmeans(data1, centers, algorithm = "MacQueen")
data2 <- read.csv("Pro6Data1.csv", encoding = "UTF-8")
data2
data2 <- read.csv("Pro6Data2.csv", encoding = "UTF-8")
data2
data2 <- read.csv("Pro6Data2.csv", fileEncoding = "UTF-8")
data2
city <- data2$city
data2 <- scale(data1[, 2:5])
data2 <- scale(data2[, 2:5])
data2
data2 <- read.csv("Pro6Data2.csv", fileEncoding = "UTF-8", row.names = TRUE)
help("read.csv")
data2 <- read.csv("Pro6Data2.csv", fileEncoding = "UTF-8")
data2 <- read.csv("Pro6Data2.csv", fileEncoding = "UTF-8")
city <- data2$city
data2 <- scale(data2[, 2:5])
rownames(data2) <- city
data2
dist2 <- dist(data2, method = "euclidean")
heatmap(as.matrix(dist2))
dist2 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist2))
model2 <- hclust(dist2, method = "ward.D")
mds2 <- cmdscale(dist2, k = 2, eig = TRUE)
X <- mds2$points[, 1]
Y <- mds2$points[, 2]
res <- lapply(2:5, function(i) {
cutree(model2, k = i)
})
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
dist2 <- dist(data2, method = "euclidean")
heatmap(as.matrix(dist2))
dist2 <- dist(data2, method = "euclidean")
heatmap(as.matrix(dist2), labRow = FALSE, labCol = FALSE)
model2 <- hclust(dist2, method = "ward.D")
mds2 <- cmdscale(dist2, k = 2, eig = TRUE)
X <- mds2$points[, 1]
Y <- mds2$points[, 2]
res <- lapply(2:5, function(i) {
cutree(model2, k = i)
})
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
library(tidyverse)
library(gridExtra)
data1 <- read.csv("Pro6Data1.csv", encoding = "UTF-8")
data1 <- scale(data1[, 2:5])
dist1 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist1))
model1 <- hclust(dist1, method = "ward.D")
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X <- mds1$points[, 1]
Y <- mds1$points[, 2]
res <- lapply(2:5, function(i) {
cutree(model1, k = i)
})
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
res[[2]]
center1 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 1})))
center2 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 2})))
center3 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 3})))
centers <- rbind(center1, center2, center3)
kmeans(data1, centers, algorithm = "MacQueen")
data2 <- read.csv("Pro6Data2.csv", fileEncoding = "UTF-8")
city <- data2$city
data2 <- scale(data2[, 2:5])
rownames(data2) <- city
d<-dist(data2)   #scale对数据做中心化或者标准化处理
hc1<-hclust(d)   #hclust提供系统聚类的计算  最长距离法
hc2<-hclust(d,"average")
hc3<-hclust(d,"centroid") #重心法
hc4<-hclust(d,"ward")  #ward法
opar<-par(mfrow=c(2,1), mar=c(5.2,4,1,0))  #生成两行一列  图像距离边界的距离
plclust(hc1,hang=-1)   #hang是表明谱系图中各类所在的位置 当hang取负值时，谱系图中的类从底部画起  生成谱系图
re1<-rect.hclust(hc1, k=5, border="red")   #将分类结果分成5类 用红色矩形笔迹标记
plclust(hc2,hang=-1)   #hang是表明谱系图中各类所在的位置 当hang取负值时，谱系图中的类从底部画起  生成谱系图
re1<-rect.hclust(hc1, k=5, border="red")   #将分类结果分成5类 用红色矩形笔迹标记
par(opr)   #在活动设备中返回所有图形参数和他们的值
opar<-par(mfrow(2,1),mar(5.2,4,0,0))
plclust(hc3,hang=-1)
re3<-rect.hclust(hc3,k=5,border="red")
plclust(hc4,hang=-1)
re4<-rect.hclust(hc4,k=5,border="red")
#在R软件中 与确定类的个数有关的函数是rect.hclust()函数 它的本质是由给定的个数或给定的阈值来确定聚类的情况
#tree是由hclust生成的结构 k是类的个数 border是矩形框的颜色
par(opar)
rect.hclust(model1, k=5, border="red")
plclust(model1, hang = -1)
rect.hclust(model1, k=5, border="red")
plot(model1, hang = -1)
rect.hclust(model1, k=5, border="red")
plot(model1, hang = -1)
rect.hclust(model1, k = 3, border = "red")
center.list <- lapply(1:3, function(i) {
colMeans(subset(data2, sapply(1:nrow(data2), function(j){
res[[2]][j] == i})))
})
centers <- rbind(center.list[[1]], center.list[[2]], center.list[[3]])
kmeans(data2, centers, algorithm = "MacQueen")
res[[2]]
model2 <- hclust(dist2, method = "ward.D")
dist2 <- dist(data2, method = "euclidean")
heatmap(as.matrix(dist2), labRow = FALSE, labCol = FALSE)
model2 <- hclust(dist2, method = "ward.D")
mds2 <- cmdscale(dist2, k = 2, eig = TRUE)
X <- mds2$points[, 1]
Y <- mds2$points[, 2]
res <- lapply(2:5, function(i) {
cutree(model2, k = i)
})
pies <- lapply(1:4, function(i) {
ggplot(data.frame(X, Y), aes(X, Y)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res[[i]])))
})
grid.arrange(pies[[1]], pies[[2]], pies[[3]], pies[[4]],
ncol = 2, nrow = 2)
res[[2]]
center.list <- lapply(1:3, function(i) {
colMeans(subset(data2, sapply(1:nrow(data2), function(j){
res[[2]][j] == i})))
})
centers <- rbind(center.list[[1]], center.list[[2]], center.list[[3]])
kmeans(data2, centers, algorithm = "MacQueen")
plot(model2, hang = -1)
rect.hclust(model2, k = 3, border = "red")
plot(model2, hang = -1)
rect.hclust(model2, k = 5, border = "red")
plot(model2, hang = -1)
rect.hclust(model2, k = 3, border = "red")
library(tidyverse)
library(gridExtra)
data1 <- read.csv("Pro6Data1.csv", encoding = "UTF-8")
data1 <- scale(data1[, 2:5])
dist1 <- dist(data1, method = "euclidean")
heatmap(as.matrix(dist1))
model1 <- hclust(dist1, method = "ward.D")
mds1 <- cmdscale(dist1, k = 2, eig = TRUE)
X1 <- mds1$points[, 1]
Y1 <- mds1$points[, 2]
res1 <- lapply(2:5, function(i) {
cutree(model1, k = i)
})
pies1 <- lapply(1:4, function(i) {
ggplot(data.frame(X1, Y1), aes(X1, Y1)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res1[[i]])))
})
grid.arrange(pies1[[1]], pies1[[2]], pies1[[3]], pies1[[4]],
ncol = 2, nrow = 2)
res1[[2]]
plot(model1, hang = -1)
rect.hclust(model1, k = 3, border = "red")
center1 <- colMeans(subset(data1, sapply(1:nrow(data1), function(i){
res[[2]][i] == 1})))
center.list1 <- lapply(1:3, function(i) {
colMeans(subset(data1, sapply(1:nrow(data1), function(j){
res1[[2]][j] == i})))})
centers1 <- rbind(center.list1[[1]],
center.list1[[2]],
center.list1[[3]])
kmeans(data1, centers1, algorithm = "MacQueen")
dist2 <- dist(data2, method = "euclidean")
data2 <- read.csv("Pro6Data2.csv", fileEncoding = "UTF-8")
city <- data2$city
data2 <- scale(data2[, 2:5])
rownames(data2) <- city
dist2 <- dist(data2, method = "euclidean")
heatmap(as.matrix(dist2), labRow = FALSE, labCol = FALSE)
model2 <- hclust(dist2, method = "ward.D")
mds2 <- cmdscale(dist2, k = 2, eig = TRUE)
X2 <- mds2$points[, 1]
Y2 <- mds2$points[, 2]
res2 <- lapply(2:5, function(i) {
cutree(model2, k = i)
})
pies2 <- lapply(1:4, function(i) {
ggplot(data.frame(X2, Y2), aes(X2, Y2)) +
geom_point(size = 2, alpha = 0.8, aes(colour = factor(res2[[i]])))
})
grid.arrange(pies2[[1]], pies2[[2]], pies2[[3]], pies2[[4]],
ncol = 2, nrow = 2)
plot(model2, hang = -1)
rect.hclust(model2, k = 3, border = "red")
data3 <- read.csv("Pro6Data3.csv")
data3 <- read.csv("Pro6Data3.csv", fileEncoding = "UTF-8")
data3
help("princomp")
data3 <- read.csv("Pro6Data3.csv", fileEncoding = "UTF-8")
industry <- data3$Industry
data3 <- scale(data3[2:9])
rownames(data3) <- industry
princomp(data3)
pc3 <- princomp(data3)
pc3 <- princomp(data3)
summary(pc3, loadings = TRUE)
loadings(pc3)
predict(pc3)
screeplot(pc3, type = "lines")
biplot(pc3)
data4 <- read.csv("Pro6Data4.csv", fileEncoding = "UTF-8")
data4 <- read.csv("Pro6Data4.csv", fileEncoding = "UTF-8")
area <- data4$Area
data4 <- scale(data4[2:9])
rownames(data4) <- industry
data4
data4 <- read.csv("Pro6Data4.csv", fileEncoding = "UTF-8")
data4
rownames(data4) <- area
data4
data4 <- read.csv("Pro6Data4.csv", fileEncoding = "UTF-8")
area <- data4$Area
data4 <- scale(data4[2:9])
rownames(data4) <- area
data4
summary(pc4, loadings = TRUE)
pc4 <- princomp(data4)
summary(pc4, loadings = TRUE)
screeplot(pc4, type = "lines")
predict(pc4)
setwd("~/")
setwd("E://WorkBench/Projects/R")
q()
setwd("Multi6/")
pc4 <- princomp(data4)
data4 <- read.csv("Pro6Data4.csv", fileEncoding = "UTF-8")
area <- data4$Area
data4 <- scale(data4[2:9])
rownames(data4) <- area
pc4 <- princomp(data4)
summary(pc4, loadings = TRUE)
data3 <- read.csv("Pro6Data3.csv", fileEncoding = "UTF-8")
industry <- data3$Industry
data3 <- scale(data3[2:9])
rownames(data3) <- industry
pc3 <- princomp(data3)
summary(pc3, loadings = TRUE)
screeplot(pc3, type = "lines")
predict(pc3)
pc3$scores
pc3 <- princomp(data3, cor = TRUE, scores = TRUE)
pc3$scores
help("princomp")
q()
